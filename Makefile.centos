# Generic makefile for Centos packages build
#
# For "API" documentation check Makefile.generic
#
# Variables supposed to be in component's Makefile.builder:
#  RPM_SPEC_FILES - list of spec files to build

### Variables required Makefile.generic
# Use spec files list as PACKAGE_LIST
PACKAGE_LIST = $(strip $(RPM_SPEC_FILES) $(RPM_SRC_PACKAGES))
DIST_BUILD_DIR = /home/user

### Local variables
RUN_AS_USER = user
ifndef OUTPUT_DIR
OUTPUT_DIR= rpm
endif

# Use += to allow Makefile.builder define some initial value
RPM_BUILD_DEFINES += --define "_rpmdir $(OUTPUT_DIR)/"
RPM_BUILD_DEFINES += --define "qubes_builder 1"
RPM_BUILD_DEFINES += --define "backend_vmm $(BACKEND_VMM)"

### Private "functions"
# List packages produced by by given spec file(s)
RPM_QUERY_DEFINES  = --define "dist .$(DIST)" 
RPM_QUERY_DEFINES += --define "centos $(subst centos,,$(DIST))"
RPM_QUERY_DEFINES += --define "qubes_builder 1"
RPM_QUERY_DEFINES += --define "backend_vmm $(BACKEND_VMM)"
RPM_QUERY_FORMAT = "$(OUTPUT_DIR)/%{ARCH}/%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}.rpm\n"

RPMSIGN_OPTS ?=
RPMSIGN_OPTS += --digest-algo=sha256
ifneq (,$(SIGN_KEY))
RPMSIGN_OPTS += --key-id=$(SIGN_KEY)
endif

ifdef REPO_PROXY
    YUM_OPTS += --setopt=proxy=$(REPO_PROXY)
endif

ifdef CENTOS_MIRROR
    YUM_OPTS += --setopt=base.baseurl=$(patsubst %/,%,$(CENTOS_MIRROR))/$(subst centos,,$(DIST))/os/x86_64
    YUM_OPTS += --setopt=updates.baseurl=$(patsubst %/,%,$(CENTOS_MIRROR))/$(subst centos,,$(DIST))/updates/x86_64
    YUM_OPTS += --setopt=extras.baseurl=$(patsubst %/,%,$(CENTOS_MIRROR))/$(subst centos,,$(DIST))/extras/x86_64
endif

ifdef EPEL_MIRROR
    YUM_OPTS += --setopt=epel.baseurl=$(patsubst %/,%,$(EPEL_MIRROR))/$(subst centos,,$(DIST))/x86_64
endif


#ifeq ($(shell expr $(subst centos,,$(DIST)) \>= 22),1)
#	YUM := dnf
#	YUM_BUILDDEP := dnf builddep --allowerasing --best
#else
	YUM := yum
	YUM_BUILDDEP := yum-builddep
#endif


# this '[ -n "$(1)" ] && ' is to suppress "call" at function definition
spec_packages = $(shell cd $(ORIG_SRC) && [ -n "$(1)" ] && \
	if [ 0`stat -c %Y $(OUTPUT_DIR)/$(notdir $(1)).list 2>/dev/null` -ge \
			0`git log -1 --pretty=format:%ct` ]; then \
		cat $(OUTPUT_DIR)/$(notdir $(1)).list; \
	else \
		rpm -q $(RPM_QUERY_DEFINES) --qf $(RPM_QUERY_FORMAT) --specfile $(1) 2>/dev/null; \
	fi)
srpm_packages = $(shell cd $(ORIG_SRC) && [ -n "$(1)" ] && \
	if [ 0`stat -c %Y $(OUTPUT_DIR)/$(notdir $(1)).list 2>/dev/null` -ge \
			0`git log -1 --pretty=format:%ct` ]; then \
		cat $(OUTPUT_DIR)/$(notdir $(1)).list; \
	else \
		rpm2cpio $(1) |cpio -i --to-stdout '*.spec' 2>/dev/null | \
		rpm -q $(RPM_QUERY_DEFINES) --qf $(RPM_QUERY_FORMAT) --specfile /dev/stdin 2>/dev/null; \
	fi)

### Targets required by Makefile.generic to build packages
dist-prepare-chroot: $(CHROOT_DIR)/home/user/.prepared_base
	@if [ ! -r $(CHROOT_DIR)/proc/cpuinfo ]; then\
		sudo mount -t proc proc $(CHROOT_DIR)/proc;\
	fi
	@if ! [ -d $(CHROOT_DIR)/tmp/qubes-packages-mirror-repo/rpm ]; then\
		mkdir -p $(CHROOT_DIR)/tmp/qubes-packages-mirror-repo;\
		sudo mount --bind $(BUILDER_REPO_DIR) $(CHROOT_DIR)/tmp/qubes-packages-mirror-repo;\
	fi
	@sudo cp $(CENTOS_PLUGIN_DIR)yum.conf $(CHROOT_DIR)/etc/yum.conf

$(CHROOT_DIR)/home/user/.prepared_base: $(CENTOS_PLUGIN_DIR)/prepare-chroot-builder $(CENTOS_PLUGIN_DIR)/build-pkgs-base.list
	@echo "-> Preparing $(DIST) build environment"
	@sudo -E $(CENTOS_PLUGIN_DIR)/prepare-chroot-builder $(CHROOT_DIR) $(DIST) || exit 1
	@touch $(CHROOT_DIR)/home/user/.prepared_base
	
dist-prep:
	@true

.PHONY: refresh-update.dnf
refresh-update.yum:
ifndef PACKAGE
	$(error "PACKAGE need to be set!")
endif
	$(CENTOS_PLUGIN_DIR)/update-local-repo.sh $(DIST)
	sudo $(CHROOT_ENV) chroot $(CHROOT_DIR) $(YUM) --disablerepo=* --enablerepo=qubes-builder-pkgs $(YUM_OPTS) clean all
	sudo $(CHROOT_ENV) chroot $(CHROOT_DIR) sh -c 'cd $(DIST_SRC); $(YUM) $(YUM_OPTS) makecache'
	sudo $(CHROOT_ENV) chroot $(CHROOT_DIR) sh -c 'cd $(DIST_SRC); $(YUM) $(YUM_OPTS) -y update'

.PHONY: refresh-update.dnf
refresh-update.dnf:
ifndef PACKAGE
	$(error "PACKAGE need to be set!")
endif
	$(CENTOS_PLUGIN_DIR)/update-local-repo.sh $(DIST)
	sudo $(CHROOT_ENV) chroot $(CHROOT_DIR) sh -c 'cd $(DIST_SRC); $(YUM) $(YUM_OPTS) --refresh -y update'

dist-build-dep: refresh-update.$(YUM)
	sudo $(CHROOT_ENV) chroot $(CHROOT_DIR) sh -c 'cd $(DIST_SRC); $(YUM_BUILDDEP) $(YUM_OPTS) -y $(PACKAGE)'

ifdef INCREMENT_DEVEL_VERSIONS
dist-package: devel_ver_path = $(ORIG_SRC)/$(OUTPUT_DIR)/$(notdir $(PACKAGE)).devel
dist-package: devel_ver_prev = $(shell cat $(devel_ver_path) 2>/dev/null)
dist-package: devel_ver := $(shell expr $(devel_ver_prev) + 1)
dist-package: RPM_BUILD_DEFINES += --define "dist .$(devel_ver).$(DIST)"
endif

dist-package:
ifndef PACKAGE
	$(error "PACKAGE need to be set!")
endif
	rm -rf $(CHROOT_DIR)/$(DIST_SRC)/$(OUTPUT_DIR)/*
ifdef INCREMENT_DEVEL_VERSIONS
	mkdir -p $(ORIG_SRC)/$(OUTPUT_DIR)
	echo $(devel_ver) > $(devel_ver_path)
endif
ifeq ($(suffix $(PACKAGE)),.rpm)
	sudo chroot $(CHROOT_DIR) su -c 'cd $(DIST_SRC); env $(CHROOT_ENV) rpmbuild $(RPM_BUILD_DEFINES) --rebuild $(PACKAGE)' - $(RUN_AS_USER)
else
	sudo chroot $(CHROOT_DIR) su -c 'cd $(DIST_SRC); env $(CHROOT_ENV) rpmbuild $(RPM_BUILD_DEFINES) -bb $(PACKAGE)' - $(RUN_AS_USER)
endif

dist-copy-out: pkg_list_path = $(ORIG_SRC)/$(OUTPUT_DIR)/$(notdir $(PACKAGE)).list
dist-copy-out:
	@echo "--> Done:" >&3
	@set -e;\
	shopt -s nullglob;\
	mkdir -p $(ORIG_SRC)/$(OUTPUT_DIR);\
	echo -n > $(pkg_list_path);\
	for arch_chroot_dir in $(CHROOT_DIR)/$(DIST_SRC)/$(OUTPUT_DIR)/*; do\
		arch_rpm_dir=$(ORIG_SRC)/$(OUTPUT_DIR)/`basename $$arch_chroot_dir`;\
		mkdir -p $$arch_rpm_dir;\
		for pkg in $$arch_chroot_dir/*; do\
			echo "      $$arch_rpm_dir/`basename $$pkg`" >&3 ;\
			echo "$(OUTPUT_DIR)/`basename $$arch_chroot_dir`/`basename $$pkg`" >> $(pkg_list_path);\
		done;\
		mkdir -p $(BUILDER_REPO_DIR)/rpm;\
		ln -f -t $(BUILDER_REPO_DIR)/rpm $$arch_chroot_dir/*;\
		mv -t $$arch_rpm_dir $$arch_chroot_dir/*;\
	done

### Additional targets

# Copies requested packages (based on PACKAGE_SET, COMPONENT, DIST) to
# requested repository (UPDATE_REPO)
# Optionally saves list of copied packages in $(SNAPSHOT_FILE)
update-repo: packages  = $(foreach SPEC,$(RPM_SPEC_FILES),$(call spec_packages,$(SPEC)))
update-repo: packages += $(foreach SPEC,$(RPM_SRC_PACKAGES),$(call srpm_packages,$(SPEC)))
update-repo: update-repo-do

update-repo-do:
ifndef UPDATE_REPO
	$(error "You need to specify destination repo in UPDATE_REPO variable")
endif
ifeq (,$(PACKAGE_LIST))
	@true
else
	@mkdir -p $(UPDATE_REPO)/rpm
	@cd $(ORIG_SRC) && ln -f $(packages) $(UPDATE_REPO)/rpm/
endif
ifdef SNAPSHOT_FILE
	@cd $(ORIG_SRC) && echo $(packages) > $(SNAPSHOT_FILE)
endif

update-repo-from-snapshot: packages = $(shell cat $(SNAPSHOT_FILE) 2>/dev/null)
update-repo-from-snapshot: update-repo-from-snapshot-do

update-repo-from-snapshot-do:
ifndef UPDATE_REPO
	$(error "You need to specify destination repo in UPDATE_REPO variable")
endif
	for f in $(packages); do \
		ln -f $(subst /$(TARGET_REPO)/,/$(SNAPSHOT_REPO)/,$(UPDATE_REPO))/rpm/`basename $$f` $(UPDATE_REPO)/rpm/ || exit 1; \
	done

sign: packages  = $(foreach SPEC,$(RPM_SPEC_FILES),$(call spec_packages,$(SPEC)))
sign: packages += $(foreach SPEC,$(RPM_SRC_PACKAGES),$(call srpm_packages,$(SPEC)))
sign:
ifeq (,$(PACKAGE_LIST))
	@true
else
	@cd $(ORIG_SRC) && for pkg in $(packages); do \
		if ! rpm -K $$pkg | grep -qi pgp; then \
			setsid -w rpmsign $(RPMSIGN_OPTS) --addsign $$pkg </dev/null || exit 1; \
		fi; \
	done
endif

check-repo: packages  = $(foreach SPEC,$(RPM_SPEC_FILES),$(call spec_packages,$(SPEC)))
check-repo: packages += $(foreach SPEC,$(RPM_SRC_PACKAGES),$(call srpm_packages,$(SPEC)))
check-repo:
ifndef UPDATE_REPO
	$(error "You need to specify destination repo in UPDATE_REPO variable")
endif
	@if [ -n "$(packages)" ]; then \
		cd $(ORIG_SRC) && ls $(addprefix $(UPDATE_REPO)/rpm/, $(notdir $(packages))) >/dev/null 2>&1 || exit 1; \
	else \
		true; \
	fi
